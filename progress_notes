QUESTIONS
	1. Why does Arduino's pinmode() have INPUT_PULLUP as an option (in addition to INPUT and OUTPUT), but no option for a pull-down resistor?
	2. In 2.5 Active Buzzer, does faster high/low alternation  means higher pitch?
	3. Why does 2.5 Active buzzer use a not PWM pin for output?
	4. Is there any difference between the GND in the Arduino's Power versus Digital sections?
	5. (Might be too much of a tangent) I've read the basic definitions, but could we do a talk-through of "*var" dereference operator, "&var" reference operator, and "string* var" pointer declaration to get a better handle on those?
	6. In 3.1, why does the resistor go into the ground bus? Would a less strong transistor allow more current (unsure which is correct term) to go to ground?

----------------------------------------------

12/31/20

3.1 Thermometer
	Potentiometer: three-terminal resistor with sliding or rotating contact that forms an adjustable voltage divider
	PTC thermistor: often used in resettable fuses, as their temp increases with more electricity going through them, and their higher temp reduces the current
	*Try this setup at first looking only at circuit diagram*
	Do breadboard connections go across ravine? No
		Useful overview: https://www.seeedstudio.com/blog/2020/01/06/how-to-use-a-breadboard-wiring-circuit-and-arduino-interfacing/
	After initial attempt at setup from diagram only: weird, illustration has it across ravine
	Revised with looking at illustration; needed this a lot
	Recap of what non-obvious connection points are doing
		Arduino
			A0: to thermister and resistor, is an analog in, ie reads analog sensors
			analog in info: https://www.arduino.cc/en/Tutorial/Foundations/AnalogInputPins
				A/D conversion is to 10 bit resolution, values 0-1023
		Thermister
			Side one: to Arduino analog input, and resistor
			Side two: to power bus, power going through it changes its temp
		Potentiometer: changes amount of voltage allowed through
			ie gets power from input, some to OTHER SIDE of breadboard, to LCD V0, rest to ground
			On breadboard side one: horizontal to LCD V0, the 'work' through
			On breadboard side two: source, ground
		Resistor:
			Flow around it is: Arduino source, breadboard power bus, thermister one side, thermister other side, Arduino analog input + 10 ohm resistor going to breadboard ground
			-> how does the resistor in this case affect how much reaches Arduino analong in?
		LCD: see http://wiki.sunfounder.cc/index.php?title=LCD1602_Module
			note: also has projects with it for raspberry pi
	Load code, run it: REDO NEEDED, LCD does not turn on
	Dismantle
	Build again from scratch, from diagram and illustration



----------------------------------------------

12/30/20

2.12 IR Receiver
	IR detector: small microchips with photocell tuned to look for IR light
	Its remote control has a matching IR LED that emits pulses as messages
	Just shining an IR light at detector won't work, must be PWM blinking at 38KHz
	IR detectors are digital out
	Peak detection is at LED light frequency 940 nm, frequency 38KHz; drops off farther from those values
	IDE setup: 
		/ Add libraries from zip: IR_Receiver_Module, IRremote
		Also must temporarily MOVE a conflicting library: RobotIRremote
			its location: laura/arduino-1.8.13/libraries/RobotIRremote
			moved to: laura/arduino-1.8.13/libraries_temp/RobotIRremote
		Then restart IDE
	Notes on code:
		Uses object from libraries 'decode_results' to map hex to meaning, rather than case/switch for each hex value
		Infinite loop repeats to check if IRrecv has received a value; frequency of asking it not clear
	Run sketch: when remote buttons pressed, prints to terminal (actual is on newlines)
		IRIR Receiver Button Decode
		6, PAUS, 7
	Move RobotIRremote back to Arduino libraries

2.13 LCD Display
	LDC component pins (some of them)
		VSS: connects to ground
		VDD: connects to +5V power supply
		RS: register select pin to set where in LCD;s memory to write data: either data register (holds what is displayed on screen) or instruction register (where LCD's controller looks for instructions on what to do next)
		E: enabling pin that when supplied with low-level energy causes the LCD module to execute instructions
	Notes upon loading: MUST ADJUST THE DIAL FOR LCD TO SHOW LETTERS, initally was all dark

2.14 DC Motors
	Most complex wires setup; many joins with breadboard's power and ground
	Directions not explicit about battery: it goes to the power input of the modulator on the breadboard 
	
----------------------------------------------

12/28/20

2.4 Serial Monitor: terminal for Arduino, establishes serial connection to the board
	Accessed from buttin in Arduino IDE: successfully opened it
	Does not have extensive settings that would be needed for advanced serial comms
	Baud rate: speed of data transmission (https://www.easytechjunkie.com/what-is-a-baud-rate.htm)
		Baud = gross bit rate / bits per second
		Bit rate = bits per symbol * symbol rate
		In binary comms, baud rate and bit rate are equal

2.5 Active buzzer
	Electronic buzzers: DC powered, have IC
		Active: has built-in oscillating source, so generates source when electrified
		Passive: no source, so no sound if DC signal used. Needs square waves of frequency 2k-5k to drive it
	unsigned char = 1 byte = 8 bits = 2^8 possible values = 256 possible values (0-255)
	Sketch loaded: makes continuous sound, alternating between the two pitches in the loop
	Use of pin 12, which is not PWM
		Pin 12 is an OUTPUT for the buzzer, only other connection is to GND
		The Active buzzer does not need any input from the board
	***code looks weird because indents are off in code file***
		-> for loops are NOT nested, they are sequential
	Repeats first loop 80 times: buzzer at high and low for 1ms each
		time in loop 1: 80*1*2 = 80 ms
		faster high/low alternation = higher pitch
	Then repeats second loop 100 times: buzzer at high and low for 2ms each
		time in loop 2: 100*2*2 = 200ms
	Effect: 
		Sounds like two different piches, I'm not able to hear if higher or lower pitch lasts longer

	##############################
	//output a frequency		
	for(i=0;i<80;i++) {
    	digitalWrite(buzzer,HIGH);
    	delay(1);//wait for 1ms
    	digitalWrite(buzzer,LOW);
    	delay(1);//wait for 1ms
    }

    //output another frequency
    for(i=0;i<100;i++) {
        digitalWrite(buzzer,HIGH);
        delay(2);//wait for 2ms
        digitalWrite(buzzer,LOW);
        delay(2);//wait for 2ms
    }
    ##############################


2.6 Passive Buzzer
	Generate 8 different sounds
		Alto Do(523Hz), Re(587Hz), Mi(659Hz), Fa(698Hz), So(784Hz), La(880Hz), Si(988Hz), Treble Do(1047Hz)
						+64        +72        +39        +86        +96        +108       +59
		Treble Do = Alto Do Hz * 2
	Passive buzzer: use PWM to make air vibrate ie generate different sounds
	Must install pitches library
		Use add from zip option
	Plays, and is very loud
	Notes on code: uses arrays, C++ syntax
	pitches.h has around 90 defined constants, eg "#define NOTE_C1  33"; includes sharps
		-> the strings are put in the array
		-> compiler replaces string with its int (frequency), so passes that to tone()
	tone(pin, frequency, duration)
		pin and duration are constants, frequency is iterated through melody[] array

2.7 Tilt Ball Switch (aka tilt sensor)
	Detect orientation or inclination
	Usually have a cavity inside containing conductive free mass, eg mercury blob or rolling ball
	One end of cavity has two conductive elements (poles)
	When end with poles is oriented dowhards, mass roles into them and acts as switch throw
	Different from accelerometer, which output DC or AC that must be analyzed, using electricity
	Note: no difference between the prongs on tilt ball switch
	Code:
		const generally preferred over #define: const makes read only, enforced by compiler error
		uses the LED built into the board for output
	Run sketch: when prongs of switch are DOWN, light is ON

2.8 Servo: geared motor that can rotate 180 degrees
	Has 3 wires: brown is GND, red is power (connect to 5V), orange is signal (connect to Dig #9)
	Imports a library that has an object for the servo
	Run sketch: rotates the motor, tilts 30, then 0, then -30

2.9 Ultrasonic Sensor
	Useful for distance measurements or avoiding obstacles
	Range for this sensor is 2cm-400cm
	Components: ultrasonic transmittor, receiver, control circuit
	How it works: when triggered by high level signal, sends 8 40Hz pulses, listens for echo back
	Vcc: positive supply voltage to an IC 
		(https://www.etechnog.com/2019/06/vcc-vss-vdd-vee-in-electronics.html)
	Like servo, imports a library that has an object for the sensor, eg can do "sensor.Distance()"
	Run the Sketch: output appears the Serial Monitor
		-> SUPER NEAT 
	Interesting: if something is closer than the min 2cm, outputs as 2227cm, over sensor's max range

2.10 Temperature and Humidity Sensor
	Sensor has its own 8-bit microcontroller; outputs digital signal
	Three pins: oddly not labeled on the sensor, only in pdf's diagrams
		DATA serial data on single bux
		VDD positive power supply voltage (as is Vcc), but for case where voltage pin is connected to drain of transistor (https://www.etechnog.com/2019/06/vcc-vss-vdd-vee-in-electronics.html)
		GND, negative power
	Writes output to Serial Monitor again
		Room temperature shows as 22 deg C (71 F)
		Humidity varies a lot between 34% - 38%
		Put sensor under vest: temp went up very slowly, eventually reaching 32 deg C (90 F)
		Sensor back in room open air, temp changed slowly
			around 5 readings (20 sec) for 1 deg C decrease
	Notes on code
		Static: variable only visible to one function, but its data persists between calls to that function
		bool data type is described oddly, "Range:0~2^32"
			C++ boolean is stored as int, 0 or 1, so its size is 2^32
			(https://www.learncpp.com/cpp-tutorial/boolean-values/)
		"*" in expression eg "measure_environment( float *temperature, float *humidity )"
			Dereference operator, ie get reference (value) from a pointer
		"&" in expression eg "measure_environment( &temperature, &humidity )"
			Reference operator: means addressof, create a pointer from a reference or variable
			(https://www.w3schools.com/cpp/cpp_pointers_dereference.asp)
		But when * used in variable declaration (eg "string* ptr"), creates pointer variable

2.11 Analog Joystick
	Analog pins read the X and Y inputs; digital reads the button
	Button connects to ground when pressed down; must connect to VCC (positive source) via pull-up resistor
	Only determined from reading sketch's code: X on joystick to pin A0, Y to pin A1
	View output in serial monitor
		in neutral, X and Y are around 505 and switch is 1
		pressing button makes switch 0; got all four corners, upper left (0,0), lower right (1023,1023)

----------------------------------------------

12/27/20

2.2 RGB LED
	Overview
		Cathode-Ground-Negative
		Anode-Source-Positive
	Component Introduction
		This type of RGB LED is common cathode: the three LEDs in it share one ground connection
		Each of the three LED color lights has its own anode (positive) connection
	Theory: PWM
		Pulse Width Modulation: way to control power; makes digital wave pattern have effect of analog
		The pulse is still only ever high or low, but power going over it is moderated by how much time it spends high
		eg if output is at 5V for 90% of the time (high width of pulse), load gets 90% of power; so looks brigher than one high 5% of time (low width of pulse)
	Connection schematic: assemble
	Code: load onto uno and run
		Note: could only get the connections to work holding resistors in place by hand. Unexpectedly, it seemed that eg the red one would only show when its resistor was pressed down, odd since the resister would be expected to reduce the power to that color
	Code: read it and the commentary in the pdf
		Put into sublime, this sketch is 82 lines
		Defined constant eg "#define BLUE 3": compiler replaces string BLUE with 3
		pinmode() sets pin to be either input or output
		int is 16-bit (2 byte) value, between -38,768 ie -2^15 and 38,767 ie (2^15)-1

2.3 Digital Inputs
	/ Overview: push different buttons to turn LED on or off
	/ Assemble, load code: works
	/ Look at circuit diagram: trace how it is implemented on the board
		Each switch's right side and the LED have a connection to board's "-" line
		Board's "-" line has one connection to uno's GND
		Left side of each switch connects to a digital input/output on the uno
		A wire goes from the uno, through resistor, then to LED's anode (+) side
	/ Read code more thoroughly: both syntax and how relates to diagram and board
		This sketch is tiny, <20 loc
		Button pinmode() defined as INPUT_PULLUP: activates pullup resistors built onto chip
			https://www.arduino.cc/en/Tutorial/Foundations/DigitalPins
		Pullup resistor: makes default state of the digital pin HIGH
		There is a pull-down resistor to make default state LOW, but it is not an option for pinmode()
			https://circuitdigest.com/tutorial/pull-up-and-pull-down-resistor

----------------------------------------------

12/26/20

/ Get repo to push, with only my own notes file, no docs
/ Resume tutorials at 1.4 Building IDE for ubuntu
	/ Open arduino IDE: it opens
1.5 Blink and add libraries
	A. Find Blink sketch in IDE: File > Examples > 01.Basics
	Run saved version of it: ERROR
		
		"avrdude: ser_open(): can't open device "/dev/ttyACM0": Permission denied
		Problem uploading to board.  See http://www.arduino.cc/en/Guide/Troubleshooting#upload for suggestions."

		Move MyBlink from project repo to Arduino program location: same error
		Info from http://www.arduino.cc/en/Guide/Troubleshooting#upload
			Error text not on Uploads section (https://support.arduino.cc/hc/en-us/sections/360003198300-Upload)
			Anything on that page that looks releated? yes
			'Error opening serial port' page
				$ ll /dev/ttyACM*
					-> crw-rw---- 1 root dialout 166, 0 Dec 26 11:56 /dev/ttyACM0
				'dialout' is group owner, need to add our user to that group
				$ sudo usermod -aG dialout laura
				$ getent group dialout
					-> dialout:x:20:laura
			But still same error
		After restart of Arduino IDE, same 'can't open device' error
		Try Upload with board disconnected: same error
		After disconnect/reconnect board USB cable: same error
		After restart laptop: works!
	B. Add library from zip: Part 2 Module Learning > Passive Buzzer > patches.zip > OK
		Appears in Sketch > Include Library > 'Contributed libraries' section
	C. Add library from Library Manager: Audio; shows as installed in the manager window
		When selected to include it in sketch, also adds "#include <DAC.h>"
Part 2: Module Learning, 12 sections total
2.1 LED Module: change brightness of LED via different resistance transistors
	Got this working

----------------------------------------------

12/25/20

/ Make github repo for my arduino materials
Pull ubunto package to install it
/ Continue reading 1.2 First know arduino
	Identify all pieces of the board
		GND: ground (https://www.techopedia.com/definition/11566/ground-gnd)
			- In electrical circuits: reference point for all signals or a common path in a circuit from which to measure voltages. Aka common drain, as voltage measurement along it is 0
			- As safety feature: earth ground, connection of electrical equipment to ground to prevent user contact with high voltages, like the grounding rods to the ground from household appliances to the floor
		PWM: pulse width modulation (https://barrgroup.com/embedded-systems/how-to/pwm-pulse-width-modulation)
			- Way to digitally encode analog signal levels; can reduce power consumption. Analog signals have continuously varying value, infinite resolution in both time and magnitude. Contrast, digital always take value from finite set of predetermined possibilities. With PWM, duty cycle of square wave is modulated to encode specific analog signal level; PWM signal is digital, at any moment DC supply is fully on or fully off
/ Install arduino IDE
			
----------------------------------------------

12/24/20

/ 1. Skim contents of tutorial download folder
	Tutorial to follow
	Code of example programs from tutorial chapters to launch on arduino
	Libraries for certain programs, described in ch 1 of tutorial
2. Skim tutorial sections
	Part 1. Preparation
		Packing list
		First look arduino
		For mac and ubuntu building dev environment
		Blink and add libraries
	Part 2. Module learning
		Lots: LED, RGB LED, digital inputs, serial monitor, active buzzer...
	Part 3. Multi-module combination course
		Thermometer, serial monitor, photocell, for digit seven segment display
3. Begin working through tutorial
	1.2 First look arduino
		Input examples: acceleration, steering, button push, twitter msg, light on sensor
		Output examples: activate motor, turn on led, publish something online
		Arduino programming language - based on Wiring
		Arduino software IDE - based on Processing

----------------------------------------------

12/20/20

/ 1. Identify every piece in the kit from the diagram in the case
/ 2. Download tutorial
3. Skim all of tutorial